{"version":3,"sources":["webpack:///./src/lib/utils.js","webpack:///./src/components/Sphere.js","webpack:///./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack:///./src/components/About.js","webpack:///./src/components/Portrait.js","webpack:///./src/components/Skills.js","webpack:///./src/components/Games.js","webpack:///./src/components/Prototypes.js","webpack:///./node_modules/three/examples/jsm/shaders/CopyShader.js","webpack:///./node_modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./node_modules/three/examples/jsm/postprocessing/MaskPass.js","webpack:///./node_modules/three/examples/jsm/postprocessing/EffectComposer.js","webpack:///./node_modules/three/examples/jsm/postprocessing/RenderPass.js","webpack:///./node_modules/three/examples/jsm/shaders/DotScreenShader.js","webpack:///./node_modules/three/examples/jsm/shaders/RGBShiftShader.js","webpack:///./src/lib/DigitalGlitch.js","webpack:///./src/lib/GlitchPass.js","webpack:///./src/components/Effects.js","webpack:///./src/pages/index.js"],"names":["randVelocity","num","Math","random","floor","getRandomInt","min","max","Sphere","meshRef","useRef","v","useFrame","mesh","current","position","x","y","z","ref","scale","args","color","shininess","specular","emissive","camera","geometry","FullScreenQuad","About","className","Portrait","href","Skills","Games","target","rel","Prototypes","to","CopyShader","uniforms","value","vertexShader","join","fragmentShader","Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","material","_mesh","defineProperty","get","set","dispose","renderer","shader","textureID","call","undefined","clone","defines","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","renderTarget","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","name","renderTarget1","renderTarget2","passes","copyPass","clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","DotScreenShader","RGBShiftShader","DigitalGlitch","tDiffuse","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","GlitchPass","dt_size","UniformsUtils","generateHeightmap","ShaderMaterial","OrthographicCamera","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","factor","_Math","randFloat","PI","data_arr","Float32Array","val","DataTexture","RGBFormat","FloatType","needsUpdate","extend","EffectComposer","RenderPass","ShaderPass","Effects","useThree","gl","composerRef","useState","factorOn","setFactorOn","setFactor","useEffect","_id","setInterval","clearInterval","setTimeout","attachArray","uniforms-scale-value","uniforms-amount-value","Home","spheres","Array","fill","fov","near","far","look","intensity","attach","map","_","key"],"mappings":"kIAAaA,EAAe,WAC1B,IAAIC,EAAsB,GAAhBC,KAAKC,SAEf,OADAF,GAAuC,IAAhCC,KAAKE,MAAoB,EAAdF,KAAKC,UAAoB,GAAK,GAIrCE,EAAe,SAACC,EAAKC,GAChC,OAAOL,KAAKE,MAAMF,KAAKC,UAAYI,EAAMD,IAAQA,GCwCpCE,IA3CA,WACb,IAAMC,EAAUC,mBAEVC,EACDX,IADCW,EAEDX,IAFCW,EAGDX,IAyBL,OApBAY,aAAS,WACP,IAAMC,EAAOJ,EAAQK,QAAQC,SAE/BF,EAAKG,GAAKL,EACVE,EAAKI,GAAKN,EACVE,EAAKK,GAAKP,GAEJE,EAAKG,GATG,IASWH,EAAKG,GAThB,MAUVH,EAAKG,GAAKH,EAAKG,IAGbH,EAAKI,GAbG,IAaWJ,EAAKI,GAbhB,MAcVJ,EAAKI,GAAKJ,EAAKI,IAGbJ,EAAKK,GAjBG,IAiBWL,EAAKK,GAjBhB,MAkBVL,EAAKK,GAAKL,EAAKK,MAKjB,0BACEC,IAAKV,EACLW,MAAO,CAACf,EAAa,GAAK,GAAIA,EAAa,GAAK,GAAIA,EAAa,GAAK,IACtEU,SAAU,CAAC,EAAE,EAAE,IAEf,0CAAsBM,KAAM,CAAC,EAAG,GAAI,MACpC,uCAAmBC,MAAO,QAAUC,UAAW,IAAKC,SAAU,SAAUC,SAAU,O,qFCjBlFC,EACAC,EAEAC,E,iCChBSC,EAVD,WACZ,OACE,yBAAKC,UAAU,aACb,qCACA,gTCeSC,EAnBE,WACf,OACE,yBAAKD,UAAU,yBACb,yBAAKA,UAAU,QACb,gDACA,oDAEF,yBAAKA,UAAU,QACf,yBAAKA,UAAU,OACb,uBAAGE,KAAK,+BAAR,UADF,IAEU,mCACN,uBAAGA,KAAK,0DAAR,YAHJ,IAIU,mCACR,uBAAGA,KAAK,qCAAR,SALF,OCmBSC,EA3BA,WACb,OACE,yBAAKH,UAAU,cACb,sCACA,4BACE,0CACA,qCACA,mCACA,qCACA,oCACA,oCACA,uCACA,qCACA,0CACA,qCACA,qCACA,8CACA,8CACA,0CACA,sCACA,uCACA,0CCROI,EAbD,WACZ,OACE,yBAAKJ,UAAU,gBACb,qCACA,4BACE,4BAAI,uBAAGK,OAAO,SAASC,IAAI,aAAaJ,KAAK,0BAAzC,UACJ,4BAAI,uBAAGG,OAAO,SAASC,IAAI,aAAaJ,KAAK,2BAAzC,WACJ,4BAAI,uBAAGG,OAAO,SAASC,IAAI,aAAaJ,KAAK,2BAAzC,c,YCWGK,EAjBI,WACjB,OACE,yBAAKP,UAAU,gBACb,0CACA,4BACE,4BAAI,kBAAC,IAAD,CAAMQ,GAAG,aAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,gBAAT,eACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,mBAAT,oBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,oB,oCCXRC,EAAa,CACfC,SAAU,CACR,SAAY,CACVC,MAAO,MAET,QAAW,CACTA,MAAO,IAGXC,aAAc,CAAC,oBAAqB,gBAAiB,cAAc,8EAA8E,KAAKC,KAAK,MAC3JC,eAAgB,CAAC,yBAA0B,8BAA+B,oBAAqB,gBAAiB,6CAA6C,oCAAoC,KAAKD,KAAK,ONX7M,SAASE,IAEPC,KAAKC,SAAU,EAEfD,KAAKE,WAAY,EAEjBF,KAAKG,OAAQ,EAEbH,KAAKI,gBAAiB,EAGxBC,OAAOC,OAAOP,EAAKQ,UAAW,CAC5BC,QAAS,aAGTC,OAAQ,WAGNC,QAAQC,MAAM,iEAIlBZ,EAAKjB,gBACCF,EAAS,IAAI,sBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACjDC,EAAW,IAAI,sBAAoB,EAAG,GAEtCC,EAAiB,SAAwB8B,GAC3CZ,KAAKa,MAAQ,IAAI,OAAKhC,EAAU+B,IAGlCP,OAAOS,eAAehC,EAAeyB,UAAW,WAAY,CAC1DQ,IAAK,WACH,OAAOf,KAAKa,MAAMD,UAEpBI,IAAK,SAAarB,GAChBK,KAAKa,MAAMD,SAAWjB,KAG1BU,OAAOC,OAAOxB,EAAeyB,UAAW,CACtCU,QAAS,WACPjB,KAAKa,MAAMhC,SAASoC,WAEtBR,OAAQ,SAAgBS,GACtBA,EAAST,OAAOT,KAAKa,MAAOjC,MAGzBE,GO7CT,IAAI,EAAa,SAAoBqC,EAAQC,GAC3CrB,EAAKsB,KAAKrB,MACVA,KAAKoB,eAA0BE,IAAdF,EAA0BA,EAAY,WAEnDD,aAAkB,kBACpBnB,KAAKN,SAAWyB,EAAOzB,SACvBM,KAAKY,SAAWO,GACPA,IACTnB,KAAKN,SAAW,gBAAc6B,MAAMJ,EAAOzB,UAC3CM,KAAKY,SAAW,IAAI,iBAAe,CACjCY,QAASnB,OAAOC,OAAO,GAAIa,EAAOK,SAClC9B,SAAUM,KAAKN,SACfE,aAAcuB,EAAOvB,aACrBE,eAAgBqB,EAAOrB,kBAI3BE,KAAKyB,OAAS,IAAI1B,EAAKjB,eAAekB,KAAKY,WAG7C,EAAWL,UAAYF,OAAOC,OAAOD,OAAOqB,OAAO3B,EAAKQ,WAAY,CAClEoB,YAAa,EACblB,OAAQ,SAAgBS,EAAUU,EAAaC,GAGzC7B,KAAKN,SAASM,KAAKoB,aACrBpB,KAAKN,SAASM,KAAKoB,WAAWzB,MAAQkC,EAAWC,SAGnD9B,KAAKyB,OAAOb,SAAWZ,KAAKY,SAExBZ,KAAKI,gBACPc,EAASa,gBAAgB,MACzB/B,KAAKyB,OAAOhB,OAAOS,KAEnBA,EAASa,gBAAgBH,GAErB5B,KAAKG,OAAOe,EAASf,MAAMe,EAASc,eAAgBd,EAASe,eAAgBf,EAASgB,kBAC1FlC,KAAKyB,OAAOhB,OAAOS,OCvCzB,IAAI,EAAW,SAAkBiB,EAAOvD,GACtCmB,EAAKsB,KAAKrB,MACVA,KAAKmC,MAAQA,EACbnC,KAAKpB,OAASA,EACdoB,KAAKG,OAAQ,EACbH,KAAKE,WAAY,EACjBF,KAAKoC,SAAU,GAGjB,EAAS7B,UAAYF,OAAOC,OAAOD,OAAOqB,OAAO3B,EAAKQ,WAAY,CAChEoB,YAAa,EACblB,OAAQ,SAAgBS,EAAUU,EAAaC,GAG7C,IASIQ,EAAYC,EATZC,EAAUrB,EAASsB,aACnBC,EAAQvB,EAASuB,MAErBA,EAAMC,QAAQlE,MAAMmE,SAAQ,GAC5BF,EAAMC,QAAQE,MAAMD,SAAQ,GAE5BF,EAAMC,QAAQlE,MAAMqE,WAAU,GAC9BJ,EAAMC,QAAQE,MAAMC,WAAU,GAI1B7C,KAAKoC,SACPC,EAAa,EACbC,EAAa,IAEbD,EAAa,EACbC,EAAa,GAGfG,EAAMC,QAAQI,QAAQC,SAAQ,GAC9BN,EAAMC,QAAQI,QAAQE,MAAMT,EAAQU,QAASV,EAAQU,QAASV,EAAQU,SACtER,EAAMC,QAAQI,QAAQI,QAAQX,EAAQY,OAAQd,EAAY,YAC1DI,EAAMC,QAAQI,QAAQM,SAASd,GAC/BG,EAAMC,QAAQI,QAAQD,WAAU,GAEhC3B,EAASa,gBAAgBF,GACrB7B,KAAKG,OAAOe,EAASf,QACzBe,EAAST,OAAOT,KAAKmC,MAAOnC,KAAKpB,QACjCsC,EAASa,gBAAgBH,GACrB5B,KAAKG,OAAOe,EAASf,QACzBe,EAAST,OAAOT,KAAKmC,MAAOnC,KAAKpB,QAEjC6D,EAAMC,QAAQlE,MAAMqE,WAAU,GAC9BJ,EAAMC,QAAQE,MAAMC,WAAU,GAE9BJ,EAAMC,QAAQI,QAAQD,WAAU,GAChCJ,EAAMC,QAAQI,QAAQI,QAAQX,EAAQc,MAAO,EAAG,YAEhDZ,EAAMC,QAAQI,QAAQE,MAAMT,EAAQe,KAAMf,EAAQe,KAAMf,EAAQe,MAChEb,EAAMC,QAAQI,QAAQD,WAAU,MAIpC,IAAI,EAAgB,WAClB9C,EAAKsB,KAAKrB,MACVA,KAAKE,WAAY,GAGnB,EAAcK,UAAYF,OAAOqB,OAAO3B,EAAKQ,WAC7CF,OAAOC,OAAO,EAAcC,UAAW,CACrCE,OAAQ,SAAgBS,GAGtBA,EAASuB,MAAMC,QAAQI,QAAQD,WAAU,GACzC3B,EAASuB,MAAMC,QAAQI,QAAQC,SAAQ,MChE3C,IAAI,EAAiB,SAAwB7B,EAAUqC,GAGrD,GAFAvD,KAAKkB,SAAWA,OAEKI,IAAjBiC,EAA4B,CAC9B,IAAIC,EAAa,CACfC,UAAW,eACXC,UAAW,eACXC,OAAQ,cAENC,EAAO1C,EAAS2C,QAAQ,IAAI,WAChC7D,KAAK8D,YAAc5C,EAAS6C,gBAC5B/D,KAAKgE,OAASJ,EAAKK,MACnBjE,KAAKkE,QAAUN,EAAKO,QACpBZ,EAAe,IAAI,oBAAkBvD,KAAKgE,OAAShE,KAAK8D,YAAa9D,KAAKkE,QAAUlE,KAAK8D,YAAaN,IACzF1B,QAAQsC,KAAO,0BAE5BpE,KAAK8D,YAAc,EACnB9D,KAAKgE,OAAST,EAAaU,MAC3BjE,KAAKkE,QAAUX,EAAaY,OAG9BnE,KAAKqE,cAAgBd,EACrBvD,KAAKsE,cAAgBf,EAAahC,QAClCvB,KAAKsE,cAAcxC,QAAQsC,KAAO,qBAClCpE,KAAK4B,YAAc5B,KAAKqE,cACxBrE,KAAK6B,WAAa7B,KAAKsE,cACvBtE,KAAKI,gBAAiB,EACtBJ,KAAKuE,OAAS,QAEKjD,IAAf7B,GACFiB,QAAQC,MAAM,kDAGGW,IAAf,GACFZ,QAAQC,MAAM,6CAGhBX,KAAKwE,SAAW,IAAI,EAAW/E,GAC/BO,KAAKyE,MAAQ,IAAI,SAGnBpE,OAAOC,OAAO,EAAeC,UAAW,CACtCmE,YAAa,WACX,IAAIC,EAAM3E,KAAK6B,WACf7B,KAAK6B,WAAa7B,KAAK4B,YACvB5B,KAAK4B,YAAc+C,GAErBC,QAAS,SAAiBC,GACxB7E,KAAKuE,OAAOO,KAAKD,GACjBA,EAAKrE,QAAQR,KAAKgE,OAAShE,KAAK8D,YAAa9D,KAAKkE,QAAUlE,KAAK8D,cAEnEiB,WAAY,SAAoBF,EAAMG,GACpChF,KAAKuE,OAAOU,OAAOD,EAAO,EAAGH,GAC7BA,EAAKrE,QAAQR,KAAKgE,OAAShE,KAAK8D,YAAa9D,KAAKkE,QAAUlE,KAAK8D,cAEnEoB,kBAAmB,SAA2BC,GAC5C,IAAK,IAAIC,EAAID,EAAY,EAAGC,EAAIpF,KAAKuE,OAAOc,OAAQD,IAClD,GAAIpF,KAAKuE,OAAOa,GAAGnF,QACjB,OAAO,EAIX,OAAO,GAETQ,OAAQ,SAAgB6E,QAEJhE,IAAdgE,IACFA,EAAYtF,KAAKyE,MAAMc,YAGzB,IAEIV,EACAO,EAHAI,EAAsBxF,KAAKkB,SAASuE,kBACpCC,GAAa,EAGbC,EAAK3F,KAAKuE,OAAOc,OAErB,IAAKD,EAAI,EAAGA,EAAIO,EAAIP,IAElB,IAAqB,KADrBP,EAAO7E,KAAKuE,OAAOa,IACVnF,QAAT,CAIA,GAHA4E,EAAKzE,eAAiBJ,KAAKI,gBAAkBJ,KAAKkF,kBAAkBE,GACpEP,EAAKpE,OAAOT,KAAKkB,SAAUlB,KAAK4B,YAAa5B,KAAK6B,WAAYyD,EAAWI,GAErEb,EAAK3E,UAAW,CAClB,GAAIwF,EAAY,CACd,IAAInD,EAAUvC,KAAKkB,SAASsB,aACxBM,EAAU9C,KAAKkB,SAASuB,MAAMC,QAAQI,QAE1CA,EAAQI,QAAQX,EAAQqD,SAAU,EAAG,YACrC5F,KAAKwE,SAAS/D,OAAOT,KAAKkB,SAAUlB,KAAK4B,YAAa5B,KAAK6B,WAAYyD,GAEvExC,EAAQI,QAAQX,EAAQc,MAAO,EAAG,YAGpCrD,KAAK0E,mBAGUpD,IAAb,IACEuD,aAAgB,EAClBa,GAAa,EACJb,aAAgB,IACzBa,GAAa,IAKnB1F,KAAKkB,SAASa,gBAAgByD,IAEhCK,MAAO,SAAetC,GACpB,QAAqBjC,IAAjBiC,EAA4B,CAC9B,IAAIK,EAAO5D,KAAKkB,SAAS2C,QAAQ,IAAI,WACrC7D,KAAK8D,YAAc9D,KAAKkB,SAAS6C,gBACjC/D,KAAKgE,OAASJ,EAAKK,MACnBjE,KAAKkE,QAAUN,EAAKO,QACpBZ,EAAevD,KAAKqE,cAAc9C,SACrBf,QAAQR,KAAKgE,OAAShE,KAAK8D,YAAa9D,KAAKkE,QAAUlE,KAAK8D,aAG3E9D,KAAKqE,cAAcpD,UACnBjB,KAAKsE,cAAcrD,UACnBjB,KAAKqE,cAAgBd,EACrBvD,KAAKsE,cAAgBf,EAAahC,QAClCvB,KAAK4B,YAAc5B,KAAKqE,cACxBrE,KAAK6B,WAAa7B,KAAKsE,eAEzB9D,QAAS,SAAiByD,EAAOE,GAC/BnE,KAAKgE,OAASC,EACdjE,KAAKkE,QAAUC,EACf,IAAI2B,EAAiB9F,KAAKgE,OAAShE,KAAK8D,YACpCiC,EAAkB/F,KAAKkE,QAAUlE,KAAK8D,YAC1C9D,KAAKqE,cAAc7D,QAAQsF,EAAgBC,GAC3C/F,KAAKsE,cAAc9D,QAAQsF,EAAgBC,GAE3C,IAAK,IAAIX,EAAI,EAAGA,EAAIpF,KAAKuE,OAAOc,OAAQD,IACtCpF,KAAKuE,OAAOa,GAAG5E,QAAQsF,EAAgBC,IAG3CC,cAAe,SAAuBC,GACpCjG,KAAK8D,YAAcmC,EACnBjG,KAAKQ,QAAQR,KAAKgE,OAAQhE,KAAKkE,YAInC,IAAI,EAAO,WAETlE,KAAKC,SAAU,EAEfD,KAAKE,WAAY,EAEjBF,KAAKG,OAAQ,EAEbH,KAAKI,gBAAiB,GAGxBC,OAAOC,OAAO,EAAKC,UAAW,CAC5BC,QAAS,aAGTC,OAAQ,WAGNC,QAAQC,MAAM,iEAIlB,EAAK7B,eAAiB,WACpB,IAAIF,EAAS,IAAI,sBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACjDC,EAAW,IAAI,sBAAoB,EAAG,GAEtCC,EAAiB,SAAwB8B,GAC3CZ,KAAKa,MAAQ,IAAI,OAAKhC,EAAU+B,IAmBlC,OAhBAP,OAAOS,eAAehC,EAAeyB,UAAW,WAAY,CAC1DQ,IAAK,WACH,OAAOf,KAAKa,MAAMD,UAEpBI,IAAK,SAAarB,GAChBK,KAAKa,MAAMD,SAAWjB,KAG1BU,OAAOC,OAAOxB,EAAeyB,UAAW,CACtCU,QAAS,WACPjB,KAAKa,MAAMhC,SAASoC,WAEtBR,OAAQ,SAAgBS,GACtBA,EAAST,OAAOT,KAAKa,MAAOjC,MAGzBE,EAxBa,GCxKtB,IAAI,EAAa,SAAoBqD,EAAOvD,EAAQsH,EAAkBC,EAAYC,GAChFrG,EAAKsB,KAAKrB,MACVA,KAAKmC,MAAQA,EACbnC,KAAKpB,OAASA,EACdoB,KAAKkG,iBAAmBA,EACxBlG,KAAKmG,WAAaA,EAClBnG,KAAKoG,gBAA4B9E,IAAf8E,EAA2BA,EAAa,EAC1DpG,KAAKG,OAAQ,EACbH,KAAKqG,YAAa,EAClBrG,KAAKE,WAAY,GAGnB,EAAWK,UAAYF,OAAOC,OAAOD,OAAOqB,OAAO3B,EAAKQ,WAAY,CAClEoB,YAAa,EACblB,OAAQ,SAAgBS,EAAUU,EAAaC,GAG7C,IAEIyE,EAAeC,EAAeC,EAF9BC,EAAevF,EAASwF,UAC5BxF,EAASwF,WAAY,OAGSpF,IAA1BtB,KAAKkG,mBACPM,EAAsBxG,KAAKmC,MAAM+D,iBACjClG,KAAKmC,MAAM+D,iBAAmBlG,KAAKkG,kBAGjClG,KAAKmG,aACPG,EAAgBpF,EAASyF,gBAAgBC,SACzCL,EAAgBrF,EAAS2F,gBACzB3F,EAAS4F,cAAc9G,KAAKmG,WAAYnG,KAAKoG,aAG3CpG,KAAKqG,YACPnF,EAASmF,aAGXnF,EAASa,gBAAgB/B,KAAKI,eAAiB,KAAOyB,GAElD7B,KAAKG,OAAOe,EAASf,MAAMe,EAASc,eAAgBd,EAASe,eAAgBf,EAASgB,kBAC1FhB,EAAST,OAAOT,KAAKmC,MAAOnC,KAAKpB,QAE7BoB,KAAKmG,YACPjF,EAAS4F,cAAcR,EAAeC,QAGVjF,IAA1BtB,KAAKkG,mBACPlG,KAAKmC,MAAM+D,iBAAmBM,GAGhCtF,EAASwF,UAAYD,KC5CzB,IAAIM,EAAkB,CACpBrH,SAAU,CACR,SAAY,CACVC,MAAO,MAET,MAAS,CACPA,MAAO,IAAI,UAAQ,IAAK,MAE1B,OAAU,CACRA,MAAO,IAAI,UAAQ,GAAK,KAE1B,MAAS,CACPA,MAAO,MAET,MAAS,CACPA,MAAO,IAGXC,aAAc,CAAC,oBAAqB,gBAAiB,cAAc,8EAA8E,KAAKC,KAAK,MAC3JC,eAAgB,CAAC,uBAAwB,uBAAwB,uBAAwB,sBAAuB,8BAA+B,oBAAqB,oBAAqB,8CAA8C,qCAAqC,+EAA+E,sDAAsD,IAAK,gBAAiB,6CAA6C,2DAA2D,8EAA8E,KAAKD,KAAK,OCjBrmBmH,EAAiB,CACnBtH,SAAU,CACR,SAAY,CACVC,MAAO,MAET,OAAU,CACRA,MAAO,MAET,MAAS,CACPA,MAAO,IAGXC,aAAc,CAAC,oBAAqB,gBAAiB,cAAc,8EAA8E,KAAKC,KAAK,MAC3JC,eAAgB,CAAC,8BAA+B,wBAAyB,uBAAwB,oBAAqB,gBAAiB,0DAA0D,iDAAiD,yCAAyC,iDAAiD,mDAAmD,KAAKD,KAAK,OCVvYoH,EAAgB,CAClBvH,SAAU,CACRwH,SAAU,CAAEvH,MAAO,MACnBwH,MAAO,CAAExH,MAAO,MAChByH,IAAK,CAAEzH,MAAO,GACd0H,OAAQ,CAAE1H,MAAO,KACjB2H,MAAO,CAAE3H,MAAO,KAChB4H,KAAM,CAAE5H,MAAO,KACf6H,OAAQ,CAAE7H,MAAO,KACjB8H,OAAQ,CAAE9H,MAAO,KACjB+H,aAAc,CAAE/H,MAAO,IACvBgI,aAAc,CAAEhI,MAAO,IACvBiI,MAAO,CAAEjI,MAAO,MAGlBC,aAAc,CACZ,oBACA,gBACA,YACA,4EACA,KACAC,KAAK,MAEPC,eAAgB,CACd,mBACA,8BACA,2BACA,wBACA,uBACA,sBACA,wBACA,wBACA,8BACA,8BACA,uBACA,oBACA,uBACA,oEACA,IACA,gBACA,cACA,gBACA,0CACA,0CAEA,gDACA,8DACA,iBACA,mCACA,IACA,SACA,sBACA,IACA,IACA,8DACA,iBACA,oBACA,IACA,SACA,mCACA,IACA,IACA,kCACA,kCAEA,wDACA,6CACA,qCACA,6CACA,iDAEA,0EACA,qCACA,IACA,SACA,0CACA,IACA,KACAD,KAAK,OCrELgI,EAAa,SAAUC,GACvB/H,EAAKsB,KAAKrB,WACYsB,IAAlB2F,GAA6BvG,QAAQC,MAAM,kDAC/C,IAAIQ,EAAS8F,EACbjH,KAAKN,SAAWqI,gBAAcxG,MAAMJ,EAAOzB,eAC3B4B,IAAZwG,IAAuBA,EAAU,IACrC9H,KAAKN,SAAL,MAAuBC,MAAQK,KAAKgI,kBAAkBF,GACvD9H,KAAKY,SAAW,IAAIqH,iBAAe,CAChCvI,SAAUM,KAAKN,SACfE,aAAcuB,EAAOvB,aACtBE,eAAgBqB,EAAOrB,iBAExBE,KAAKpB,OAAS,IAAIsJ,sBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACtDlI,KAAKmC,MAAQ,IAAIgG,QACjBnI,KAAKoI,KAAO,IAAIC,OAAK,IAAIC,sBAAoB,EAAG,GAAI,MACpDtI,KAAKoI,KAAKG,eAAgB,EAC1BvI,KAAKmC,MAAMqG,IAAIxI,KAAKoI,MACpBpI,KAAKyI,OAAS,GAGlBZ,EAAWtH,UAAYF,OAAOC,OAAOD,OAAOqB,OAAO3B,EAAKQ,WAAY,CAClEoB,YAAakG,EAEbpH,OAAQ,SAAUS,EAAUU,EAAaC,EAAYyD,EAAWI,GAChE,IAAM+C,EAASrL,KAAKK,IAAI,EAAGuC,KAAKyI,QAChCzI,KAAKN,SAAL,SAA0BC,MAAQkC,EAAWC,QAC7C9B,KAAKN,SAAL,KAAsBC,MAAQvC,KAAKC,SAAWoL,EAC9CzI,KAAKN,SAAL,IAAqBC,MAAQ,EAEvB8I,GACHzI,KAAKN,SAAL,OAAwBC,MAASvC,KAAKC,SAAW,GAAMoL,EACvDzI,KAAKN,SAAL,MAAuBC,MAAQ+I,OAAMC,WAAWvL,KAAKwL,GAAIxL,KAAKwL,IAAMH,EACpEzI,KAAKN,SAAL,aAA8BC,MAAQ+I,OAAMC,UAAU,EAAG,GAAKF,EAC9DzI,KAAKN,SAAL,aAA8BC,MAAQ+I,OAAMC,UAAU,EAAG,GAAKF,EAC9DzI,KAAKN,SAAL,OAAwBC,MAAQ+I,OAAMC,WAAW,GAAK,IAAOF,EAC7DzI,KAAKN,SAAL,OAAwBC,MAAQ+I,OAAMC,WAAW,GAAK,IAAOF,GAEvDzI,KAAKN,SAAL,IAAqBC,MAAQ,EAChCK,KAAKoI,KAAKxH,SAAWZ,KAAKY,SAC1BZ,KAAKI,gBACDc,EAASa,gBAAgB,MACzBb,EAAST,OAAOT,KAAKmC,MAAOnC,KAAKpB,UAGjCsC,EAASa,gBAAgBH,GACrB5B,KAAKG,OAAOe,EAASf,QACzBe,EAAST,OAAOT,KAAKmC,MAAOnC,KAAKpB,UAM3CoJ,kBAAmB,SAAUF,GAI3B,IAHI,IAAIe,EAAW,IAAIC,aAAahB,EAAUA,EAAU,GAChDzC,EAASyC,EAAUA,EAElB1C,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CACzB,IAAI2D,EAAML,OAAMC,UAAU,EAAG,GAC7BE,EAAa,EAAJzD,EAAQ,GAAK2D,EACtBF,EAAa,EAAJzD,EAAQ,GAAK2D,EACtBF,EAAa,EAAJzD,EAAQ,GAAK2D,EAI1B,IAAIjH,EAAU,IAAIkH,cAAYH,EAAUf,EAASA,EAASmB,YAAWC,aAErE,OADApH,EAAQqH,aAAc,EACfrH,KC9EfsH,YAAO,CAAEC,iBAAgBC,aAAYC,aAAY1B,eAEjD,IAiCe2B,EAjCC,WAAO,IAAD,EACUC,cAAtBC,EADY,EACZA,GAAIvH,EADQ,EACRA,MAAOvD,EADC,EACDA,OACb+K,EAAc/L,mBAFA,EAGWgM,oBAAS,GAAlCC,EAHc,KAGJC,EAHI,OAIOF,mBAAS,GAA9BnB,EAJc,KAINsB,EAJM,KAuBpB,OAjBAjM,aAAS,WACP6L,EAAY3L,QAAQyC,WACnB,GAEJuJ,qBAAU,WACT,IAAMC,EAAMC,aAAY,kBAAMJ,GAAY,KAAO,KACjD,OAAO,kBAAMK,cAAcF,OAG5BD,qBAAU,WACLH,IACHE,EAAU,IACVK,YAAW,kBAAML,EAAU,KAAI,KAC/BD,GAAY,MAEX,CAACD,EAAUpB,IAGX,oCAAgBpK,IAAKsL,EAAapL,KAAM,CAACmL,IACvC,gCAAYW,YAAY,SAAS9L,KAAM,CAAC4D,EAAOvD,KAC/C,gCAAYyL,YAAY,SAAS9L,KAAM,CAACwI,GAAkBuD,uBAAsB,IAChF,gCAAYD,YAAY,SAAS9L,KAAM,CAACyI,GAAiBuD,wBAAuB,QAChF,gCAAYF,YAAY,SAAS5B,OAAQA,MC7BhC,SAAS+B,IACtB,IACMC,EAAO,YAAOC,MADF,KACmBC,KAAK,OAE1C,OACE,8BACE,yBAAK3L,UAAU,QACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,0BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAQJ,OAAQ,CAACgM,IAAK,GAAIC,KAAM,GAAKC,IAAK,IAAMC,KAAM,CAAC,EAAE,EAAE,GAAI9M,SAAU,CAAC,GAAG,GAAG,MAC9E,sCAAkBA,SAAU,EAAE,GAAI,GAAI,IAAK+M,UAAW,EAAGxM,MAAO,WAChE,kCAAcwM,UAAW,GAAKxM,MAAO,WACrC,yBAAKyM,OAAO,MAAM1M,KAAM,CAAC,UAAW,EAAG,MACtCkM,EAAQS,KAAI,SAACC,EAAG/F,GAAJ,OAAU,kBAAC1H,EAAA,EAAD,CAAQ0N,IAAKhG,OACpC,kBAAC,EAAD","file":"component---src-pages-index-js-2f81e813d3e16dbe69e5.js","sourcesContent":["export const randVelocity = () => {\n  let num = Math.random() * 0.1;\n  num *= Math.floor(Math.random()*2) === 1 ? 1 : -1;\n  return num;\n};\n\nexport const getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n","import React, { useRef } from \"react\";\nimport { useFrame } from 'react-three-fiber';\nimport { randVelocity, getRandomInt } from '../lib/utils';\n\nconst Sphere = () => {\n  const meshRef = useRef();\n\n  const v = {\n    x: randVelocity(),\n    y: randVelocity(),\n    z: randVelocity()\n  };\n\n  const limit = 50;\n\n  useFrame(() => {\n    const mesh = meshRef.current.position;\n\n\t\tmesh.x += v.x\n\t\tmesh.y += v.y;\n\t\tmesh.z += v.z;\n\n    if (mesh.x >= limit || mesh.x < -limit) {\n      mesh.x = -mesh.x;\n    }\n\n    if (mesh.y >= limit || mesh.y < -limit) {\n      mesh.y = -mesh.y;\n    }\n\n    if (mesh.z >= limit || mesh.z < -limit) {\n      mesh.z = -mesh.z;\n    }\n  });\n\n  return (\n    <mesh\n      ref={meshRef}\n      scale={[getRandomInt(0.5, 1), getRandomInt(0.5, 1), getRandomInt(0.5, 1)]}\n      position={[0,0,0]}\n    >\n      <sphereBufferGeometry args={[1, 32, 32]} />\n      <meshPhongMaterial color={0x41d1ff} shininess={100} specular={0xffe501} emissive={0x0} />\n    </mesh>\n  );\n}\n\nexport default Sphere;\n","import { OrthographicCamera, PlaneBufferGeometry, Mesh } from \"../../../build/three.module.js\";\n\nfunction Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n}\n\nObject.assign(Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { Pass };","import React from 'react';\n\nconst About = () => {\n  return (\n    <div className=\"box about\">\n      <h2>About</h2>\n      <div>I'm a software developer. My primary focus is front end development, but I also have experience working with a variety of back end technologies. I believe that when it comes to writing code - less is more. When I'm not writing code I'm traveling and reading good books.\n      </div>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\n\nconst Portrait = () => {\n  return (\n    <div className=\"box bio space-between\">\n      <div className=\"name\">\n        <h1>Travis Tillotson</h1>\n        <div>Software Developer</div>\n      </div>\n      <div className=\"pic\"></div>\n      <div className=\"row\">\n        <a href=\"https://github.com/Opus1no2\">Github</a>\n          &nbsp;<span>/</span>\n          <a href=\"https://www.linkedin.com/in/travis-tillotson-2b210619/\">LinkedIn</a>\n          &nbsp;<span>/</span>\n        <a href=\"mailto:tillotson.travis@gmail.com\">Email</a>&nbsp;\n      </div>\n    </div>\n  );\n};\n\nexport default Portrait;\n","import React from 'react';\n\nconst Skills = () => {\n  return (\n    <div className=\"box skills\">\n      <h2>Skills</h2>\n      <ul>\n        <li>Javascript</li>\n        <li>React</li>\n        <li>Vue</li>\n        <li>Ember</li>\n        <li>Ruby</li>\n        <li>Node</li>\n        <li>Sinatra</li>\n        <li>Rails</li>\n        <li>PostgreSQL</li>\n        <li>MYSQL</li>\n        <li>Redis</li>\n        <li>Elastic Search</li>\n        <li>AWS Cloudfront</li>\n        <li>AWS Lambda</li>\n        <li>AWS S3</li>\n        <li>AWS EC2</li>\n        <li>AWS EBS</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Skills;\n","import React from 'react';\n\nconst Games = () => {\n  return (\n    <div className=\"box projects\">\n      <h2>Games</h2>\n      <ul>\n        <li><a target=\"_blank\" rel=\"noreferrer\" href=\"http://evil-snake.com/\">Snake</a></li>\n        <li><a target=\"_blank\" rel=\"noreferrer\" href=\"http://sudoku-game.com/\">Sudoku</a></li>\n        <li><a target=\"_blank\" rel=\"noreferrer\" href=\"http://tetro-mania.com/\">Tetris</a></li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Games;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Prototypes = () => {\n  return (\n    <div className=\"box learning\">\n      <h2>Prototypes</h2>\n      <ul>\n        <li><Link to=\"/Spheres/\">Spheres</Link></li>\n        <li><Link to=\"/Orbit0/\">Orbit 0</Link></li>\n        <li><Link to=\"/Orbit1/\">Orbit 1</Link></li>\n        <li><Link to=\"/Orbit2/\">Orbit 2</Link></li>\n        <li><Link to=\"/Mandlebrot/\">Mandlebrot</Link></li>\n        <li><Link to=\"/CirclePattern/\">Circle Patterns</Link></li>\n        <li><Link to=\"/FractalTree/\">Fractal Tree</Link></li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Prototypes;\n","/**\n * Full-screen textured quad shader\n */\nvar CopyShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"opacity\": {\n      value: 1.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 texel = texture2D( tDiffuse, vUv );\", \"\tgl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n};\nexport { CopyShader };","import { ShaderMaterial, UniformsUtils } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ShaderPass(shader, textureID) {\n  Pass.call(this);\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n  if (shader instanceof ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n\n  this.fsQuad = new Pass.FullScreenQuad(this.material);\n};\n\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: ShaderPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { ShaderPass };","import { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function MaskPass(scene, camera) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\n\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: MaskPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var context = renderer.getContext();\n    var state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    var writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n});\n\nvar ClearMaskPass = function ClearMaskPass() {\n  Pass.call(this);\n  this.needsSwap = false;\n};\n\nClearMaskPass.prototype = Object.create(Pass.prototype);\nObject.assign(ClearMaskPass.prototype, {\n  render: function render(renderer\n  /*, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n});\nexport { MaskPass, ClearMaskPass };","import { Clock, LinearFilter, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Vector2, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    var size = renderer.getSize(new Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on CopyShader');\n  }\n\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on ShaderPass');\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n  this.clock = new Clock();\n};\n\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  isLastEnabledPass: function isLastEnabledPass(passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\n\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n};\n\nObject.assign(Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { EffectComposer, Pass };","import { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function RenderPass(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.overrideMaterial = overrideMaterial;\n  this.clearColor = clearColor;\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n  this.clear = true;\n  this.clearDepth = false;\n  this.needsSwap = false;\n};\n\nRenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: RenderPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    var oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n    if (this.overrideMaterial !== undefined) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n\n    if (this.clearColor) {\n      oldClearColor = renderer.getClearColor().getHex();\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n\n    if (this.clearColor) {\n      renderer.setClearColor(oldClearColor, oldClearAlpha);\n    }\n\n    if (this.overrideMaterial !== undefined) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n\n    renderer.autoClear = oldAutoClear;\n  }\n});\nexport { RenderPass };","import { Vector2 } from \"../../../build/three.module.js\";\n/**\n * Dot screen shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nvar DotScreenShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"tSize\": {\n      value: new Vector2(256, 256)\n    },\n    \"center\": {\n      value: new Vector2(0.5, 0.5)\n    },\n    \"angle\": {\n      value: 1.57\n    },\n    \"scale\": {\n      value: 1.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec2 center;\", \"uniform float angle;\", \"uniform float scale;\", \"uniform vec2 tSize;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"float pattern() {\", \"\tfloat s = sin( angle ), c = cos( angle );\", \"\tvec2 tex = vUv * tSize - center;\", \"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\", \"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\", \"}\", \"void main() {\", \"\tvec4 color = texture2D( tDiffuse, vUv );\", \"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\", \"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\", \"}\"].join(\"\\n\")\n};\nexport { DotScreenShader };","/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\nvar RGBShiftShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"amount\": {\n      value: 0.005\n    },\n    \"angle\": {\n      value: 0.0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float amount;\", \"uniform float angle;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 offset = amount * vec2( cos(angle), sin(angle));\", \"\tvec4 cr = texture2D(tDiffuse, vUv + offset);\", \"\tvec4 cga = texture2D(tDiffuse, vUv);\", \"\tvec4 cb = texture2D(tDiffuse, vUv - offset);\", \"\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\", \"}\"].join(\"\\n\")\n};\nexport { RGBShiftShader };","/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nvar DigitalGlitch = {\n  uniforms: {\n    tDiffuse: { value: null }, //diffuse texture\n    tDisp: { value: null }, //displacement texture for digital glitch squares\n    byp: { value: 0 }, //apply the glitch ?\n    amount: { value: 0.08 },\n    angle: { value: 0.02 },\n    seed: { value: 0.02 },\n    seed_x: { value: 0.02 }, //-1,1\n    seed_y: { value: 0.02 }, //-1,1\n    distortion_x: { value: 0.5 },\n    distortion_y: { value: 0.6 },\n    col_s: { value: 0.05 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n    'void main() {',\n    'vUv = uv;',\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform int byp;', //should we apply the glitch ?\n    'uniform sampler2D tDiffuse;',\n    'uniform sampler2D tDisp;',\n    'uniform float amount;',\n    'uniform float angle;',\n    'uniform float seed;',\n    'uniform float seed_x;',\n    'uniform float seed_y;',\n    'uniform float distortion_x;',\n    'uniform float distortion_y;',\n    'uniform float col_s;',\n    'varying vec2 vUv;',\n    'float rand(vec2 co){',\n    'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\n    '}',\n    'void main() {',\n    'if(byp<1) {',\n    'vec2 p = vUv;',\n    'float xs = floor(gl_FragCoord.x / 0.5);',\n    'float ys = floor(gl_FragCoord.y / 0.5);',\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n    'vec4 normal = texture2D (tDisp, p*seed*seed);',\n    'if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {',\n    'if(seed_x>0.){',\n    'p.y = 1. - (p.y + distortion_y);',\n    '}',\n    'else {',\n    'p.y = distortion_y;',\n    '}',\n    '}',\n    'if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {',\n    'if(seed_y>0.){',\n    'p.x=distortion_x;',\n    '}',\n    'else {',\n    'p.x = 1. - (p.x + distortion_x);',\n    '}',\n    '}',\n    'p.x+=normal.x*seed_x*(seed/5.);',\n    'p.y+=normal.y*seed_y*(seed/5.);',\n    //base from RGB shift shader\n    'vec2 offset = amount * vec2( cos(angle), sin(angle));',\n    'vec4 cr = texture2D(tDiffuse, p + offset);',\n    'vec4 cga = texture2D(tDiffuse, p);',\n    'vec4 cb = texture2D(tDiffuse, p - offset);',\n    'gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\n    //add noise\n    'vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.05);',\n    'gl_FragColor = gl_FragColor+ snow;',\n    '}',\n    'else {',\n    'gl_FragColor=texture2D (tDiffuse, vUv);',\n    '}',\n    '}',\n  ].join('\\n'),\n}\n\nexport { DigitalGlitch }\n","import {\n    DataTexture,\n    FloatType,\n    Math as _Math,\n    Mesh,\n    OrthographicCamera,\n    PlaneBufferGeometry,\n    RGBFormat,\n    Scene,\n    ShaderMaterial,\n    UniformsUtils,\n} from 'three'\nimport { DigitalGlitch  } from './DigitalGlitch.js'\nimport { Pass  } from 'three/examples/jsm/postprocessing/Pass.js'\n\n/**\n *\n * @author alteredq / http://alteredqualia.com/\n *\n */\n\nvar GlitchPass = function (dt_size) {\n    Pass.call(this);\n    if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on THREE.DigitalGlitch');\n    var shader = DigitalGlitch;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (dt_size === undefined) dt_size = 64;\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n  \tthis.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n    \tfragmentShader: shader.fragmentShader,\n  \t});\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new Scene();\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n    this.quad.frustumCulled = false; // Avoid getting clipped\n    this.scene.add(this.quad);\n    this.factor = 0;\n}\n\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: GlitchPass,\n\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n\t\tconst factor = Math.max(0, this.factor);\n\t\tthis.uniforms['tDiffuse'].value = readBuffer.texture;\n\t\tthis.uniforms['seed'].value = Math.random() * factor; //default seeding\n\t\tthis.uniforms['byp'].value = 0;\n\n    if (factor) {\n\t\t\t\t\tthis.uniforms['amount'].value = (Math.random() / 90) * factor\n\t\t\t\t\tthis.uniforms['angle'].value = _Math.randFloat(-Math.PI, Math.PI) * factor\n\t\t\t\t\tthis.uniforms['distortion_x'].value = _Math.randFloat(0, 1) * factor\n\t\t\t\t\tthis.uniforms['distortion_y'].value = _Math.randFloat(0, 1) * factor\n\t\t\t\t\tthis.uniforms['seed_x'].value = _Math.randFloat(-0.3, 0.3) * factor\n\t\t\t\t\tthis.uniforms['seed_y'].value = _Math.randFloat(-0.3, 0.3) * factor\n\n    } else this.uniforms['byp'].value = 1\n        this.quad.material = this.material\n    if (this.renderToScreen) {\n            renderer.setRenderTarget(null)\n            renderer.render(this.scene, this.camera)\n\n    } else {\n            renderer.setRenderTarget(writeBuffer)\n            if (this.clear) renderer.clear()\n            renderer.render(this.scene, this.camera)\n\n    }\n\n  },\n\n  generateHeightmap: function (dt_size) {\n        var data_arr = new Float32Array(dt_size * dt_size * 3)\n        var length = dt_size * dt_size\n\n    for (var i = 0; i < length; i++) {\n            var val = _Math.randFloat(0, 1)\n            data_arr[i * 3 + 0] = val\n            data_arr[i * 3 + 1] = val\n            data_arr[i * 3 + 2] = val\n\n    }\n\n        var texture = new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType)\n        texture.needsUpdate = true\n        return texture\n\n  },\n\n})\n\nexport { GlitchPass  }\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useFrame, useThree, extend } from 'react-three-fiber';\nimport { EffectComposer  } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass  } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { ShaderPass  } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { DotScreenShader } from 'three/examples/jsm/shaders/DotScreenShader.js';\nimport { RGBShiftShader } from 'three/examples/jsm/shaders/RGBShiftShader.js';\nimport { GlitchPass } from '../lib/GlitchPass.js';\n\nextend({ EffectComposer, RenderPass, ShaderPass, GlitchPass });\n\nconst Effects = () => {\n  const { gl, scene, camera } = useThree();\n  const composerRef = useRef();\n\tconst [factorOn, setFactorOn] = useState(false);\n\tconst [factor, setFactor] = useState(0);\n\n  useFrame(() => {\n    composerRef.current.render();\n  }, 1);\n\n\tuseEffect(() => {\n\t\tconst _id = setInterval(() => setFactorOn(true), 5000);\n\t\treturn () => clearInterval(_id);\n\t});\n\n\tuseEffect(() => {\n\t\tif (factorOn) {\n\t\t\tsetFactor(0.5);\n\t\t\tsetTimeout(() => setFactor(0), 1000);\n\t\t\tsetFactorOn(false);\n\t\t}\n\t}, [factorOn, factor]);\n\n  return (\n    <effectComposer ref={composerRef} args={[gl]}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <shaderPass attachArray=\"passes\" args={[DotScreenShader]} uniforms-scale-value={4} />\n      <shaderPass attachArray=\"passes\" args={[RGBShiftShader]} uniforms-amount-value={0.0015} />\n      <glitchPass attachArray=\"passes\" factor={factor} />\n    </effectComposer>\n  );\n};\n\nexport default Effects;\n","import React from 'react';\nimport About from '../components/About';\nimport Portrait from '../components/Portrait';\nimport Skills from '../components/Skills';\nimport Games from '../components/Games';\nimport Prototypes from '../components/Prototypes';\nimport { Canvas } from 'react-three-fiber';\nimport Sphere from '../components/Sphere';\nimport Effects from '../components/Effects';\n\nexport default function Home() {\n  const sphereCnt = 700;\n  const spheres = [...Array(sphereCnt).fill(null)];\n\n  return (\n    <main>\n      <div className=\"cont\">\n        <div className=\"row\">\n          <Portrait />\n          <About />\n          <Skills />\n        </div>\n        <div className=\"row last space-between\">\n          <Games />\n          <Prototypes />\n        </div>\n      </div>\n      <div className=\"full-page\">\n        <Canvas camera={{fov: 75, near: 0.1, far: 1000, look: [0,0,0], position: [30,20,30]}}>\n          <directionalLight position={[-10, 10, 10]} intensity={1} color={0xffffff}/>\n          <ambientLight intensity={0.1} color={0xffffff} />\n          <fog attach=\"fog\" args={['skyblue', 0, 25]} />\n          {spheres.map((_, i) => <Sphere key={i}/>)}\n          <Effects />\n        </Canvas>\n      </div>\n    </main>\n  );\n}\n"],"sourceRoot":""}