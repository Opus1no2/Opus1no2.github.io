{"version":3,"sources":["webpack:///./src/pages/FractalTree.js"],"names":["FractalTree","useState","angle","setAngle","depth","setDepth","canvasRef","useRef","deg_to_rad","degs","Math","PI","fractal_tree","useCallback","x","y","angleAdjust","ctx","xScalePercent","window","innerWidth","yScalePercent","innerHeight","x2","cos","y2","sin","beginPath","strokeStyle","moveTo","lineTo","stroke","draw","clearRect","useEffect","current","getContext","canvas","width","height","className","to","htmlFor","data-el","type","value","onChange","e","Number","target","ref","id"],"mappings":"2FAAA,4CAoFeA,UAjFK,WAAO,IAAD,EACEC,mBAAS,IAA5BC,EADiB,KACVC,EADU,OAEEF,mBAAS,IAA5BG,EAFiB,KAEVC,EAFU,KAOlBC,EAAYC,iBAAO,MAEnBC,EAAa,SAACC,GAClB,OAAOA,EAAOC,KAAKC,GAAK,KAGpBC,EAAeC,uBAAY,SAACC,EAAGC,EAAGb,EAAOE,EAAOY,EAAaC,GACjE,GAAc,IAAVb,EAAa,CACf,IAAMc,EAXO,IAWqBC,OAAOC,WAAa,IAChDC,EAXO,IAWqBF,OAAOG,YAAc,IAEnDC,EAAKT,EAAIJ,KAAKc,IAAIhB,EAAWN,IAAUE,EAASc,EAChDO,EAAKV,EAAIL,KAAKgB,IAAIlB,EAAWN,IAAUE,EAASiB,EAEpDJ,EAAIU,YACJV,EAAIW,YAAJ,UAA4B,IAAMxB,EAAlC,MAA4C,IAAMA,EAAQ,IAA1D,IACAa,EAAIY,OAAOf,EAAGC,GACdE,EAAIa,OAAOP,EAAIE,GACfR,EAAIc,SAEJnB,EAAaW,EAAIE,EAAIvB,EAAQc,EAAaZ,EAAQ,EAAGY,EAAaC,GAClEL,EAAaW,EAAIE,EAAIvB,EAAQc,EAAaZ,EAAQ,EAAGY,EAAaC,MAEnE,IAEGe,EAAOnB,uBAAY,SAACX,EAAOE,EAAOa,GACtCA,EAAIgB,UAAU,EAAG,EAAGd,OAAOC,WAAYD,OAAOG,aAC9CV,EAAaO,OAAOC,WAAa,EAAGD,OAAOG,YAAa,GAAIlB,EAAOF,EAAOe,KACzE,CAACL,IA8BJ,OApBAsB,qBAAU,WACR,IACMjB,EADSX,EAAU6B,QACNC,WAAW,MAC1BnB,GAAKe,EAAK9B,EAAOE,EAAOa,KAC3B,CAACe,EAAM9B,EAAOE,IAEjB8B,qBAAU,WACR,IAAMG,EAAS/B,EAAU6B,QAEzBE,EAAOC,MAAQnB,OAAOC,WACtBiB,EAAOE,OAASpB,OAAOG,cAEtB,IAEHY,qBAAU,WACR,IACMjB,EADSX,EAAU6B,QACNC,WAAW,MAC1BnB,GAAKL,EAAaO,OAAOC,WAAa,EAAGD,OAAOG,YAAa,GAAI,GAAI,GAAIL,KAC5E,CAACL,IAGF,oCACE,yBAAK4B,UAAU,aACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,yBAAKD,UAAU,sBACb,2BAAOE,QAAQ,SAAf,SACA,2BAAOC,UAAQ,eAAeC,KAAK,SAASC,MAAO3C,EAAO4C,SAnC5C,SAACC,GACnB5C,EAAS6C,OAAOD,EAAEE,OAAOJ,WAmCrB,2BAAOH,QAAQ,SAAf,SACA,2BAAOC,UAAQ,QAAQC,KAAK,SAASC,MAAOzC,EAAO0C,SAjCrC,SAACC,GACnB1C,EAAS2C,OAAOD,EAAEE,OAAOJ,YAkCvB,4BAAQK,IAAK5C,EAAW6C,GAAG,cAAcX,UAAU","file":"component---src-pages-fractal-tree-js-88a9dfc1500405edad29.js","sourcesContent":["import { Link } from \"gatsby\";\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\nconst FractalTree = () => {\n  const [angle, setAngle] = useState(20);\n  const [depth, setDepth] = useState(15);\n\n  const xPercent = 0.55;\n  const yPercent = 0.83;\n\n  const canvasRef = useRef(null);\n\n  const deg_to_rad = (degs) => {\n    return degs * Math.PI / 180;\n  };\n\n  const fractal_tree = useCallback((x, y, angle, depth, angleAdjust, ctx) => {\n    if (depth !== 0) {\n      const xScalePercent = (xPercent * window.innerWidth / 100);\n      const yScalePercent = (yPercent * window.innerHeight / 100);\n\n      let x2 = x - Math.cos(deg_to_rad(angle)) * depth * (xScalePercent);\n      let y2 = y - Math.sin(deg_to_rad(angle)) * depth * (yScalePercent);\n\n      ctx.beginPath();\n      ctx.strokeStyle = `rgb(0, ${255 / depth}, ${255 / depth + 50})`;\n      ctx.moveTo(x, y);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n\n      fractal_tree(x2, y2, angle - angleAdjust, depth - 1, angleAdjust, ctx);\n      fractal_tree(x2, y2, angle + angleAdjust, depth - 1, angleAdjust, ctx);\n    }\n  }, []);\n\n  const draw = useCallback((angle, depth, ctx) => {\n    ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    fractal_tree(window.innerWidth / 2, window.innerHeight, 90, depth, angle, ctx);\n  }, [fractal_tree]);\n\n  const adjustAngle = (e) => {\n    setAngle(Number(e.target.value));\n  };\n\n  const adjustDepth = (e) => {\n    setDepth(Number(e.target.value));\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (ctx) draw(angle, depth, ctx);\n  }, [draw, angle, depth]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (ctx) fractal_tree(window.innerWidth / 2, window.innerHeight, 90, 15, 20, ctx);\n  }, [fractal_tree]);\n\n  return (\n    <>\n      <div className=\"pull-left\">\n        <Link to=\"/\">Home</Link>\n      </div>\n      <div className=\"inputs upper-right\">\n        <label htmlFor=\"angle\">Angle</label>\n        <input data-el=\"angle-adjust\" type=\"number\" value={angle} onChange={adjustAngle} />\n        <label htmlFor=\"death\">Depth</label>\n        <input data-el=\"depth\" type=\"number\" value={depth} onChange={adjustDepth}/>\n      </div>\n      <canvas ref={canvasRef} id=\"fractalTree\" className=\"full-page\"></canvas>\n    </>\n  );\n};\n\nexport default FractalTree;\n"],"sourceRoot":""}